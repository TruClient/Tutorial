
/* Do not edit this file.
 *
 * If you make changes to this file while the browser is running,
 * the changes will be overwritten when the browser exits.
 *
 * To make a manual change to preferences, you can visit the URL about:config
 * For more information, see http://www.mozilla.org/unix/customizing.html#prefs
 */

//**********************************ACCESSIBILITY*************************************

// Allow automatic page refresh. Prevent accessibility message box 
// disabled by default , not sure why we need it
user_pref("accessibility.blockautorefresh", false);

// Disable Caret Browsing mode
// disabled by default , not sure why we need it
user_pref("accessibility.browsewithcaret", false);

// IEnumVARIANT is part of the API that allows applications to retrieve a number of accessible
// objects from the MSAA server at once. It generally improves the performance of
// communication with external applications
// This preference exists largely for debugging purposes
// Does seem to be valid but kept here just in case
user_pref("accessibility.disableenumvariant", true);

// Prevents showing "switch to" dialog when moving to caret browsing mode via [F7]
user_pref("accessibility.warn_on_browsewithcaret", false);
user_pref("accessibility.disablecache", true);


//**********************************ADVANCED*************************************
// This preference’s purpose is a bit vague. It’s been used for plugin-related functions, as
// well as for determining how tabs and windows should open. It is perhaps best known as a
// preference to divert URLs from external applications to open in new tabs in an existing
// browser window. The vagueness is due to the fact that this preference deals with DDE, a
// method of communication between applications (different instances of Mozilla, or Mozilla
// and the desktop shell)
// In order for Mozilla to use DDE, it must be set to handle the http protocol in Windows
// and several registry subkeys must be set correctly. This preference determines whether
// the subkeys are set while Mozilla is running and then removed upon exiting
user_pref("advanced.system.supportDDEExec", false);

//**********************************CONFIFG*************************************
// Prevent Windows from swapping out memory when the program is minimized 
 user_pref("config.trim_on_minimize", false);

//*************************************DOM*************************************
// Set max script execution time to 120 seconds, instead of 20 seconds by default, before
// Firefox will prompt the user to stop it. Changing to 0 will allow endless execution.
// This setting is for scripts that run with chrome privileges
 user_pref("dom.max_chrome_script_run_time", 120);

// When a script is executing, Mozilla's UI will be unresponsive until the script’s thread ends.
// Correspondingly, Mozilla will alert you when a script is taking a long time to run and let you
// stop the script. This preference lets you define what “a long time” is.
// While recording our engine slows down the application, so we want to give it some time to react.
user_pref("dom.max_script_run_time", 40);

// Disable the "Prevent page from creating additional dialogs" checkbox
user_pref("dom.successive_dialog_time_limit",0);

// This settings comes to disable pop-up blocker
// false: pop-up blocker is not going to be active
// true: pop-up blocker will be active
user_pref("dom.disable_open_during_load", false);

//The number of pop-ups to allow from a single non-click event
//Default value is 20. 
user_pref("dom.popup_maximum", 100);

//*************************************GFX*************************************
// Color management allows images and colors to be displayed consistently across a variety of devices.
// Mozilla recognizes embedded ICC profiles in image files and uses a local color profile to perform the
// color adjustments. This preference determines if Mozilla should make these adjustments.
// The extension Color Management sets this preference through a GUI.
//   0 - Disable color management.
//   1 - Enable color management for rendered graphics.
//   2 - Enable color management for tagged graphics only. (Default)
// Note: These values apply to Firefox 3.5 and SeaMonkey 2. In previous versions, color management was
// disabled by default via the boolean preference gfx.color_management.enabled set to "false"
// * Without a properly calibrated monitor and a correct color profile, color management may actually
//   make colors look worse
user_pref("gfx.color_management.enabled", 0);

// Disable GPU acceleration since load generators doesn't have a strong GPU, and it 
// chockes very early with no indication. The performance is much better when disabling it.
// Note: if you are performing a load test on NBA2k you better enable it and call me to check
user_pref("layers.acceleration.disabled", true);

// Disable GPU memory usage by firefox
user_pref("gfx.content.azure.enabled", false);
user_pref("gfx.direct2d.disabled", true);

//*************************************JAVASCRIPT*************************************
// To enable TraceMonkie Javascript compilation on content (FF default is true)
user_pref("javascript.options.jit.content", true);

// To enable TraceMonkie Javascript compilation on XUL/chrome (FF default is true)
user_pref("javascript.options.jit.chrome", true);

// This preference controls whether chrome errors and warnings are logged to the JavaScript Console
user_pref("javascript.options.showInConsole", true);
		
//*************************************KEYWORD*************************************
// When entering information in the Location Bar, Mozilla attempts to convert the information into a
// usable URI. For example, “mozilla.org” is automatically converted to “http://mozilla.org/”. When
// Mozilla is unable to discern what URL the u	ser wanted, the information that was entered may be
// submitted to an Internet Keywords service
// This preference determines whether or not to use Internet Keywords
user_pref("keyword.enabled", false);

//*************************************NETWORK*************************************
// This preference determines whether to use of the operating system's NTLM implementation to
// silently authenticate the user with their Windows domain logon with proxy servers
// We would like to prompt for authentication always
 user_pref("network.automatic-ntlm-auth.allow-proxies", false);
 		
// This preference enables proxy authentication using the negotiate method
// For us it means to fall back to NTLM whenever Kerberos is used
// Since we do support NTLM with "network.automatic-ntlm-auth.allow-proxies" option,
// it's natural to use the below option for Kerberos
 user_pref("network.negotiate-auth.allow-proxies", false);

// This preference determines which sites are allowed to automatically authenticate via NTLM. If
// the user requests a site that authenticates with NTLM that is not in this list, the user will
// be prompted for login details
// We would like to prompt for authentication always
 user_pref("network.automatic-ntlm-auth.trusted-uris", "");

// This preference controls when cookies expire.
//   0 - The cookie's lifetime is supplied by the server. (Default)
//   1 - The user is prompted for the cookie's lifetime.
//   2 - The cookie expires at the end of the session (when the browser closes).
//   3 - The cookie lasts for the number of days specified by network.cookie.lifetime.days
user_pref("network.cookie.lifetimePolicy", 2);

// True - Disable IPv6 DNS lookups. (Default in Mac OS X prior to 2008-01-05, OS/2)
// False - Perform IPv6 DNS lookups on IPv6-capable OSs. (Default everywhere else)
// We expect that this preference could speed up connections
user_pref("network.dns.disableIPv6", true);
		
// This preference controls how long to cache results
// We don't want the cache results to be deleted fast, so we use one hour, while FF default is 60.
 user_pref("network.dnsCacheExpiration", 3600);
 		
// A popular method of disguising a website’s true location is to make use of the username/password syntax
// in URLs. Normally, when sites require authentication, users can specify the username and password directly
// in the URL thusly: http://username:password@example.com/
//(This is the same syntax that FTP URLs use.) However, this syntax can be abused to make it appear as though
// the URL is that of another host: 
// http://www.mozilla.org&login3:141592653589793238462643383279502884197169@example.com/evil
// In response to this possibility, Microsoft removed the syntax from IE. Mozilla’s response was to use a
// dialog to warn the user when visiting URLs that use the username and password syntax (but not when manually
// entering them). This preference lets you determine what is considered “phishy” enough to warrant displaying
// the dialog
user_pref("network.http.phishy-userpass-length", 255);
		
// Determines whether to use HTTP/1.1 pipelining.
//   True: Enable pipelining
//   False (default): Disable pipelining
// Note: Pipelining is not well-supported by some servers and proxies. Things may break — use with caution
user_pref("network.http.pipelining", false);

// Link prefetching is when a webpage hints to the browser that certain pages are likely to be visited, so the
// browser downloads them immediately so they can be displayed immediately when the user requests it
// This preference controls whether link prefetching is enabled
// We want to disable prefetching for accuracy (transactions)	
 user_pref("network.prefetch-next", false);

// This preference determines whether a specific protocol that is already configured to be handled but
// whose behavior is not defined by a specific network.protocol-handler.external.(protocol) preference
// should be handled internally or externally.
//   true - This protocol should be handled by an external application. (Default)
//   false - This protocol should be handled internally.
//    * network.protocol-handler.expose-all or network.protocol-handler.expose.(protocol)
//     (which tell the application that this protocol should be handled in some way) must be set to true
//     for this preference to take effect.
//    * Some protocols cannot be handled internally. Attempting to load a protocol that can't be handled
//      internally does nothing.
//    * This preference only exists by default for certain protocols.
//    * The external application to run is determined by the OS on Windows and by
//      network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details
user_pref("network.protocol-handler.external-default", false);
		
// This preference determines whether a specific protocol that is already configured to be handled should
// be handled internally or externally.
//   true - This protocol should be handled by an external application.
//   false - This protocol should be handled internally. 
//   * The external application to run is determined by the OS on Windows and by
//     network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details. 
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
user_pref("network.protocol-handler.external.afp", false);
user_pref("network.protocol-handler.external.data", false);
user_pref("network.protocol-handler.external.disk", false);
user_pref("network.protocol-handler.external.disks", false);
user_pref("network.protocol-handler.external.hcp", false);
user_pref("network.protocol-handler.external.javascript", false);
user_pref("network.protocol-handler.external.mailto", false);
user_pref("network.protocol-handler.external.moz-icon", false);
user_pref("network.protocol-handler.external.ms-help", false);
user_pref("network.protocol-handler.external.news", false);
user_pref("network.protocol-handler.external.nntp", false);
user_pref("network.protocol-handler.external.shell", false);
user_pref("network.protocol-handler.external.snews", false);
user_pref("network.protocol-handler.external.vbscript", false);
user_pref("network.protocol-handler.external.vnd.ms.radio", false);
		
// This preference controls whether to warn the user before opening an external application for
// protocols where a more specific network.protocol-handler.warn-external.(protocol) is not set.
//  true - Give the user a chance to cancel before passing the data to the external application.
//  false - Pass the data to the external application without warning the user. 
// On one side we don't want a dialog to be open, on the other side if there is no dialog it is
// a security problem, so we choose to disable warning. 
user_pref("network.protocol-handler.warn-external-default", false);
		
// This preference controls whether to warn the user before opening an external
// application for a specific protocol.
//   true - Give the user a chance to cancel before passing the data to the external application.
//   false - Pass the data to the external application without warning the user.
// * This preference only exists by default for certain protocols. 
// UI (Firefox): On the protocol warning dialog, "Remember my choice for all links of this type"
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
// On one side we don't want a dialog to be open, on the other side if there is no dialog it 
// is a security problem, so we choose to disable warning
user_pref("network.protocol-handler.warn-external.afp", false);
user_pref("network.protocol-handler.warn-external.data", false);
user_pref("network.protocol-handler.warn-external.disk", false);
user_pref("network.protocol-handler.warn-external.disks", false);
user_pref("network.protocol-handler.warn-external.hcp", false);
user_pref("network.protocol-handler.warn-external.javascript", false);
user_pref("network.protocol-handler.warn-external.mailto", false);
user_pref("network.protocol-handler.warn-external.moz-icon", false);
user_pref("network.protocol-handler.warn-external.ms-help", false);
user_pref("network.protocol-handler.warn-external.news", false);
user_pref("network.protocol-handler.warn-external.nntp", false);
user_pref("network.protocol-handler.warn-external.shell", false);
user_pref("network.protocol-handler.warn-external.snews", false);
user_pref("network.protocol-handler.warn-external.vbscript", false);
user_pref("network.protocol-handler.warn-external.vnd.ms.radio", false);

// RTS Support: The following settings must be defined before RTS manager initializes and overrides these values.
user_pref("network.dnsCacheEntries", 20);

// Disable automatic offline mode functionality
user_pref("network.manage-offline-status", false);
		
//*************************************PLUGIN*************************************
//   True (default): When a plugin is needed, prompt the user
//   False: Don't prompt the user to install needed plugins
//   Not sure if applicable in FF 28
user_pref("plugin.default_plugin_disabled", false);	
	
// Name of plugin to scan for, with a minimum version specified. By default, this preference exists for
// Acrobat (5.0), QuickTime (5.0), SunJRE (1.3), and WindowsMediaPlayer (7.0)
user_pref("plugin.scan.Acrobat", "999");
user_pref("plugin.scan.Quicktime", "999");
user_pref("plugin.scan.SunJRE", "999");
user_pref("plugin.scan.WindowsMediaPlayer", "999");

// True (default): Locate plugins by the directories specified in the Windows registry for PLIDs
// (currently HKLM\Software\MozillaPlugins\xxxPLIDxxx\Path)
// False: Opposite of the above
user_pref("plugin.scan.plid.all", false);

// Controls the scanning of the Navigator 4.x directory for plugins. When this preference is missing, the
// default is to pickup popular plugins such as Flash, Shockwave, Acrobat, and Quicktime. If set to true,
// ALL plugins will be picked up and if set to false the scan will not happen at all
// Not sure if applicable in FF 28
user_pref("plugin.scan.4xPluginFolder", false);

// Skip looking for RealPlayer plugin in components folder (Netscape behavior)
// Not sure if applicable in FF 28
user_pref("plugin.skip_real_player_hack", true);

// In Firefox, if media embedded in the page require a plugin that is not currently installed, an information
// bar is displayed at the top of the page allowing the user to install the required plugin. This preference
// will hide the information bar even if plugins are missing
user_pref("plugins.hide_infobar_for_missing_plugin", true);

// false -> never notify the user regarding outdated plugins
user_pref("plugins.update.notifyUser", false);

//*************************************PRIVACY*************************************

// Do not show an icon in the status bar when a popup has been blocked
user_pref("privacy.popups.showBrowserMessage", false);

//*************************************SIGNON*************************************
// Firefox’s Password Manager can expose usernames and passwords on websites with cross-site forms (that is,
// HTML forms that submit to other domains). This includes many sites that will display unsanitized user-submitted
// content, such as MySpace. As an initial defense against such attacks, this preference was created to prevent
// the Password Manager from auto-filling form fields with usernames and passwords.
//   True -  Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
//   False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though
//           there are multiple usernames/password pairs remembered for the form (fill password after username has
//           been manually typed).  
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
//  signon.prefillForms in the near future
user_pref("signon.autofillForms", false);
		
// True - Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
// False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though there
// are multiple usernames/password pairs remembered for the form (fill password after username has been manually typed). 
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
// signon.prefillForms in the near future
user_pref("signon.prefillForms", false);

// True: (default): Enable the Password Manager
// False Opposite of the above 
user_pref("signon.rememberSignons", false);

//*************************************SECURITY*************************************
// if a server requires client certificate and the Select one automatically option preference is selected,
// the client certificate will be chosen automatically and selection dialog will not prompt to the user 
user_pref("security.default_personal_cert","Select Automatically");

// Prevent firefox from blocking pages with mixed mode
user_pref("security.mixed_content.block_active_content",false);
user_pref("security.mixed_content.block_display_content",false);

// Disable security warnings. Seems irrelevant anymore in FF 28. Kept just in case it is still valid
user_pref("security.warn_entering_secure", false);
user_pref("security.warn_entering_weak", false);
user_pref("security.warn_leaving_secure", false);
user_pref("security.warn_submit_insecure", false);
user_pref("security.warn_viewing_mixed", false);

//*************************************STARTUP***************************************
//Do not show FF welcome homepage at first run
user_pref("startup.homepage_welcome_url", "");

//*************************************NETWORK***************************************

// Trick Firefox for assuming some legacy settings were already migrated
user_pref("network.cookie.prefsMigrated", true);

//*************************************BROWSER***************************************
//RTS Support: must be defined before RTS manager initializes and overrides these values.
user_pref("browser.startup.homepage", "about:blank");

// Don't show browser rights
user_pref("browser.rights.3.shown", true);

// true -> never show about:rights notification
user_pref("browser.rights.override", true); 

//Disable creation of thumbnails for visited sites
user_pref("browser.pagethumbnails.capturing_disabled", true);

// Prevent caching pages on the disk since we are using private browsing anyway
user_pref("browser.cache.disk.enable", false);

// Disable offline cache (might impact offline storage of HTML 5)
user_pref("browser.cache.offline.enable", false);

// Disable new cache mechanism which over populates the profile directory
user_pref("browser.cache.use_new_backend", 0);
user_pref("browser.cache.use_new_backend_temp", false);

// Disable download of AUT favicon
user_pref("browser.chrome.site_icons", false);

// Disable showing browsed pages in Windows "Recent Documents" feature
user_pref("browser.download.manager.addToRecentDocs", false);

// Allow quitting the browser during file download without prompting the user to take action
user_pref("browser.download.manager.quitBehavior", 2);

// Prevent anti virus from scanning downloaded files as download has finished
user_pref("browser.download.manager.scanWhenDone", false);

// Do not save forms or search box data
user_pref("browser.formfill.enable", false);

// Prevent retrieving and displaying micro summaries for bookmarks
user_pref("browser.microsummary.enabled", false);

// Do not import bookmark data from file to the database
user_pref("browser.places.importBookmarksHTML", false);

// Do not automatically start Firefox in private browsing mode
user_pref("browser.privatebrowsing.autostart", false);

// Keep private browsing session once switching to it. 
// Seems to be deprecated already in FF 23. Kept here to be on the safe side
user_pref("browser.privatebrowsing.keep_current_session", true);

// Disable Google Safe  Browsing extension since it creates additional not relevant requests
user_pref("browser.safebrowsing.enabled", false);
user_pref("browser.safebrowsing.malware.enabled", false);
user_pref("browser.safebrowsing.remoteLookups", false);
user_pref("browser.safebrowsing.malware.reportURL", "");
user_pref("browser.safebrowsing.reportMalwareErrorURL", "");
user_pref("browser.safebrowsing.reportErrorURL", "");
user_pref("browser.safebrowsing.reportGenericURL", "");
user_pref("browser.safebrowsing.reportPhishURL", "");
user_pref("browser.safebrowsing.warning.infoURL", "");
user_pref("browser.safebrowsing.reportMalwareURL", "");
user_pref("browser.safebrowsing.keyURL", "");
user_pref("browser.safebrowsing.gethashURL", "");
user_pref("browser.safebrowsing.reportURL", "");
user_pref("browser.safebrowsing.updateURL", "");
user_pref("browser.safebrowsing.id", "");
user_pref("services.sync.prefs.sync.browser.safebrowsing.enabled", false);
user_pref("services.sync.prefs.sync.browser.safebrowsing.malware.enabled", false);

// Disable session restore feature
// In load mode we don't need to save session store, so we don't use it in interactive too for consistency
user_pref("browser.sessionstore.enabled", false);
 
// Disabling all session restore options after crash and after regular FF closing
user_pref("browser.sessionstore.resume_from_crash", false);
user_pref("browser.sessionstore.max_resumed_crashes", 0);
user_pref("browser.sessionstore.max_tabs_undo", 0);
user_pref("browser.sessionstore.max_windows_undo", 0);
user_pref("browser.startup.page", 1); // this is here to prevent restoring with last viewed page

// Disable any prompt when quiting the browser even if there are several tabs opened
user_pref("browser.warnOnQuit", false);
user_pref("browser.warnOnClose", false);
user_pref("browser.warnOnOpen", false);

// This preference controls what should be loaded in newly created window. It doesn't affect what
// is loaded at startup or in new tabs. 0 means it will be blank and not firefox default page or users' homepage
user_pref("browser.windows.loadOnNewWindow", 0);

// Always use an error page instead of alert for sites that can't be loaded because of a network problem
user_pref("browser.xul.error_pages.enabled", true);

// Disable default browser check on browser startup
user_pref("browser.shell.checkDefaultBrowser", false);

// Disable search engines updates
 user_pref("browser.search.update", false);

// Prevent Firefox from checking of the search engine needs to be updated
user_pref("browser.search.updateinterval", -1);

// Disable search suggestions
user_pref("browser.search.suggest.enabled", false);

// Prevent the search engine from logging messgae to Firefox Console
user_pref("browser.search.log", false);

// The maximum number of pages in the browser's session history, i.e. the maximum number of URLs you can traverse purely through the Back/Forward buttons. 
// Default value is 50. 
user_pref("browser.sessionhistory.max_entries", 10);
 
// Determines the maximum number of content viewers to cache for "bfcache" (fast back/forward navigation). 
// Default value is -1 (calculate based on available memory). All values less than 0 are equivalent.
// Note: Firefox 1.5 and above only. Supersedes browser.sessionhistory.max_viewers.
user_pref("browser.sessionhistory.max_total_viewers", 0);

// Disable taskbar preview of windows
user_pref("browser.taskbar.previews.enable", false);

//*************************************APPLICATION***************************************
// This preference determines whether the application will auto-update
user_pref("app.update.enabled", false);
user_pref("app.update.auto", false);


//***************************************EXTENTIONS***************************************
// Prevent periodical retrieval of extensions blocklist from the server specified in extensions.blocklist.url
 user_pref("extensions.blocklist.enabled", false);

// Disable extensions automatic updates
 user_pref("extensions.update.enabled", false);
 user_pref("extensions.update.notifyUser", false);

// Always unpack installed extensions (link from the extensions folder to a packed extension is not working)
user_pref("extensions.alwaysUnpack", true);
		
// Disable the firebug firstrun page
user_pref("extensions.firebug.currentVersion", "1.9.1");

// Prevent Add-on Control Wizard from being prompt on first Firefox run
user_pref("extensions.shownSelectionUI", true);
user_pref("extensions.autoDisableScopes", 0); //consider changing from 0 to 11

// Enable TC add-in without prompting for user confirmation
user_pref("extensions.enabledAddons", "TruClient%40hp.com:12.00");
user_pref("extensions.enabledItems", "TruClient@hp.com:12.00");

// Used by Firefox to determine whether it needs to recheck all the installed extensions for compatibility.
// Firefox reads its own version number to check extension compatibility
//user_pref("extensions.lastAppVersion", "28.0.0");

//***********************************HEALTH REPORT***************************************
// Disable Firefox health reports
user_pref("datareporting.healthreport.service.enabled", false);
user_pref("datareporting.healthreport.service.firstRun", true);
user_pref("datareporting.healthreport.uploadEnabled", false);
user_pref("datareporting.policy.dataSubmissionEnabled", false);
user_pref("datareporting.healthreport.logging.consoleEnabled", false);
user_pref("datareporting.healthreport.pendingDeleteRemoteData", true);
user_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 1);

//***************************************LAYOUT******************************************
// Prevent css warnings from appearing in Firefox Error Console
user_pref("layout.css.report_errors", false);

// Disable spell checker in text area
user_pref("layout.spellcheckDefault", 0);

//***************************************TOOLKIT******************************************
// disable the "help firefox by reporting memory..."
user_pref("toolkit.telemetry.prompted", 2);
user_pref("toolkit.telemetry.rejected", true);
user_pref("toolkit.telemetry.enabled", false);